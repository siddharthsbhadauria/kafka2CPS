Certainly! To move the configuration to `function.json`, you can use the `appSettings` section. Here's how you can modify your `function.json` and `__init__.py`:

1. **Update `function.json`:**
   Modify the `bindings` section in `function.json` to include the necessary input bindings (e.g., BlobTrigger) and output bindings (e.g., AzureBlob for logging) along with `appSettings` for PostgreSQL connection details:

   ```json
   {
     "bindings": [
       {
         "name": "blob",
         "type": "blobTrigger",
         "direction": "in",
         "path": "your-container/{name}",
         "connection": "AzureWebJobsStorage"
       }
     ],
     "scriptFile": "__init__.py",
     "entryPoint": "main",
     "appSettings": [
       {
         "name": "PG_HOST",
         "value": "your_postgres_host"
       },
       {
         "name": "PG_DATABASE",
         "value": "your_postgres_database"
       },
       {
         "name": "UAMI_ID",
         "value": "your_uami_id"
       }
     ]
   }
   ```

2. **Update `__init__.py`:**
   Modify your Python script to read configuration from environment variables:

   ```python
   import azure.functions as func
   import os
   import psycopg2
   from psycopg2 import sql

   def main(blob: func.InputStream):
       # Get connection details from environment variables
       host = os.environ['PG_HOST']
       database = os.environ['PG_DATABASE']
       uami_id = os.environ['UAMI_ID']

       # ... rest of the script remains the same
   ```

This way, you have separated the configuration from your code, making it easier to manage. Ensure that you deploy both the modified `function.json` and `__init__.py` to your Azure Function.
